<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media\Entity\Media;
use Drupal\simple_sitemap\Simplesitemap;

/**
 * Implements web service call function to athenainsight
 * This will process the data and prepare the data.
 */
function _ah_custom_call_ai_taxonomy_webservice() {
	$options = [
			'headers' => ['X-CSRF-Token' => 'ai_to_ah'],
			'timeout' => 25,
  ];
  $uri = \Drupal::config('ahd_custom.adminsettings')->get('ah_insight_bridge_url');
  $uri = $uri . 'ai_taxonomy';
  try {
    $response = \Drupal::httpClient()->get($uri, $options);
    $data = (string) $response->getBody();
    if (empty($data)) {
      return FALSE;
    }
  }
  catch (RequestException $e) {
    return FALSE;
  }
	if ($response->getStatusCode() == 200 && !empty($data)) {
		$taxonomy = (array)json_decode($data);
		$topics = [];
		$types = [];
		$tags = [];
		foreach ($taxonomy['topics'] as $items) {
			$topics['topics_' . $items->tid] = $items->name;
		}
		foreach ($taxonomy['types'] as $items) {
			$types['types_' . $items->tid] = $items->name;
		}
		foreach ($taxonomy['tags'] as $items) {
			$tags['tags_' . $items->tid] = $items->name;
		}
  }
	$output['topics'] = $topics;
	$output['types'] = $types;
  $output['tags'] = $tags;
	return $output;
}
/**
 * Set dynamic allowed values for the alignment field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function ahd_custom_allowed_values_function(FieldStorageConfig $definition,
  ContentEntityInterface $entity = NULL, $cacheable){

  $service_result = _ah_custom_call_ai_taxonomy_webservice();
  return $service_result;

}
/**
 * Implements hook_form_alter().
 */
function ahd_custom_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $forms = ['taxonomy_term_services_form', 'taxonomy_term_features_and_services_form',
  'taxonomy_term_priorities_form','block_content_icon_bars_module_edit_form', 'block_content_grid_module_edit_form', 'block_content_fs_module_edit_form','taxonomy_term_segment_form'];
  if(in_array($form_id, $forms)){
    $form['#validate'][] = '_ahd_custom_validate_taxonomy';
  }
  else if ($form_id == 'user_login_form') {
    $form['#validate'][] = '_ahd_custom_validate_api_user';
  }
  if($form_id == 'media_document_edit_form'){
    $entity = $form_state->getFormObject()->getEntity();
    $fid = $entity->field_document->first()->getValue()['target_id'];
    if($fid){
      $db = \Drupal::database();
      $data = $db->select('file_managed', 'fe')
        ->fields('fe')
        ->orderBy('fe.fid', 'DESC')
        ->range(0, 1)
        ->condition('fe.fid', $fid, '=')
        ->execute();
      $value = $data->fetchAssoc();
      $latest_file = str_replace('private://', '',$value['uri']);
      $destination = 'internal:' . \Drupal::request()->get('destination');
      if ($destination !== 'internal:') {
        $form_state->setRedirectUrl(\Drupal\Core\Url::fromUri($destination));
      }
    }
    if($form['field_pub_url_doc']) {
      $form['field_pub_url_doc']['#disabled'] = 'disabled';
      if (!empty($form['field_pub_url_doc']['widget'][0]['value']['#default_value'])) {
        $form['field_pub_url_doc_expose'] = [
          '#type' => 'hidden',
          '#title' => $form['field_pub_url_doc']['widget'][0]['#title'],
          '#markup' => $form['field_pub_url_doc']['widget'][0]['value']['#default_value'],
          '#weight' => 101,
        ];
      }
    }
    if ($entity->isPublished()) {
      $form['#attributes']['class'][] = 'media-published';
          // Add a checkbox to replace file status check.
      $form['replace_file_status'] = array(
        '#type' => 'checkbox',
        '#title' => t("Replace File."),
        '#required' => FALSE,
        '#attributes' => array('checked' => 'checked')
      );
    }

    $form['actions']['submit']['#submit'][] = 'ahd_custom_media_document_edit_form_submit';
  }
  if($form_id == 'media_document_add_form'){
    if($form['field_pub_url_doc']){
      $form['field_pub_url_doc']['#disabled'] = 'disabled';
    }
    $form['actions']['submit']['#submit'][] = 'ahd_custom_media_document_edit_form_submit';
  }
}
function ahd_custom_media_document_edit_form_submit($form, Drupal\Core\Form\FormStateInterface $form_state){
  $entity = $form_state->getFormObject()->getEntity();
  if ($entity->bundle() == 'document') {
    if($entity->isPublished()){
      $media_field = $entity->get('field_document')->first()->getValue();
      $file =  Drupal\file\Entity\File::load($media_field['target_id']);
      $private_file_path ='';
      $public_media_file_path ='';
      if ($file) {
        $uri = $file->getFileUri();
        $url = file_create_url($uri);
        $fname= $file->getFilename();
        $fname = str_replace('private://', '', $uri);
        $public_file_dir = $_SERVER['DOCUMENT_ROOT'].'/sites/default/files/media_docs/';
        $public_media_file_path = $public_file_dir.$fname;
        $private_file_path = drupal_realpath('private://').'/'.$fname;
      }
      if($form_state->getValue('replace_file_status') == 1){
        $pub_url = $entity->get('field_pub_url_doc')->first()->getValue();
        $pub_url = $pub_url['value'];
        $file_path = str_replace(_get_base_url(), '', $pub_url);
        copy($private_file_path, $_SERVER['DOCUMENT_ROOT'].$file_path);
      }
      else if(file_exists($private_file_path)){
        // if(!file_exists($public_file_dir)){
        //   mkdir(dirname($public_file_dir), 0777, true);
        // }
        copy($private_file_path,$public_media_file_path);
        $base_url = _get_base_url();
        if ($fname) {
          $pub_file_path = $base_url.'/sites/default/files/media_docs/'.$fname;
          $entity->field_pub_url_doc = $pub_file_path;
        }
        $entity->set('field_pub_url_doc', $pub_file_path);
        $entity->save();
      }
    }
  }
}
/**
 * Callback for Form validation
 */
function _ahd_custom_validate_taxonomy($form, FormStateInterface $form_state) {
  if($form_state->getValue('form_id') == 'taxonomy_term_services_form') {
    if (strlen($form_state->getValue(['field_service_link',0, 'title'])) > 20 ) {
      $form_state->setErrorByName('field_service_link', t('Link text value should be less than 20 chars.'));
    }
  }
  else if($form_state->getValue('form_id') == 'taxonomy_term_priorities_form') {
    if (strlen($form_state->getValue(['field_priority_link',0, 'title'])) > 20 ) {
      $form_state->setErrorByName('field_priority_link', t('Link text value should be less than 20 chars.'));
    }
  }
  else if($form_state->getValue('form_id') == 'block_content_icon_bars_module_edit_form') {
    // Validating min number of items in icon bar.
    $type = $form_state->getValue(['field_icon_bar_type',0, 'value']);
    $items['services-ribbon'] = $form_state->getValue('field_services_ribbon_items') ;
    $items['priorities-ribbon'] = $form_state->getValue('field_priorities_ribbon_items') ;
    $counter = _ahd_custom_validate_icon_bar_count($type, $items);
    //AC: Minimum 4 item required.
    if($counter < 4){
      $form_state->setErrorByName('field_priority_link', t('Minimum 4 ribbon items required.'));
    }

  }
  else if($form_state->getValue('form_id') == 'block_content_grid_module_edit_form') {
    // Validating min number of items in Grid Module.
    $type = $form_state->getValue(['field_grid_type',0, 'value']);
    $items['Services Grid'] = $form_state->getValue('field_services') ;
    $items['Priorities Grid'] = $form_state->getValue('field_priorities') ;
    $counter = _ahd_custom_validate_icon_bar_count($type, $items);
    //AC: Minimum 4 item required.
    if($counter < 4){
      if($type =='Services Grid'){
        $form_state->setErrorByName('field_services', t('Minimum 4 grid items required.'));
      }
      elseif($type =='Priorities Grid'){
        $form_state->setErrorByName('field_priorities', t('Minimum 4 grid items required.'));
      }
    }

  }
  else if($form_state->getValue('form_id') == 'block_content_fs_module_edit_form') {
    // Validating min number of items in Features and Services Module.
    $type = 'Checklist Items';
    $items['Checklist Items'] = $form_state->getValue('field_checklistitems') ;
    $counter = _ahd_custom_validate_icon_bar_count($type, $items);
    //AC: Minimum 2 item required.
    if($counter < 2){
        $form_state->setErrorByName('field_checklistitems', t('Minimum 2 Checklist items required.'));
    }

  }
	else if($form_state->getValue('form_id') == 'taxonomy_term_segment_form') {
		$regex  = '/^\/[a-zA-Z0-9_-]*$/';
		if (!preg_match($regex,$form_state->getValue(['field_service_url',0, 'value']))) {
			$form_state->setErrorByName('field_service_url', t('Url should start with / and can only contain alphanumerics, underscore of hiphen'));
		}
	}
}
/**
 * Custom user login validation method.
 *
 * Prevent user login through ui if the user is having role `api_user`.
 */
function _ahd_custom_validate_api_user($form, FormStateInterface $form_state) {
  $username = $form_state->getValues()['name'];
  $user_roles = \Drupal::database()->select('users_field_data', 'u')
    ->fields('ur', ['roles_target_id']);
  $user_roles->join(
      'user__roles',
      'ur',
      'u.uid = ur.entity_id and u.name = :name',
      [':name' => $username]
    );
  $user_roles = $user_roles->execute()->fetchAll();
  if (!empty($user_roles)
   && count($user_roles) == 1
   && $user_roles[0]->roles_target_id == 'api_user') {
    $form_state->setErrorByName(
      'name',
      'Direct login for users with role `api_user` is forbidden. Please contact site administrator for more details.'
    );
  }
}

function _ahd_custom_validate_icon_bar_count($icon_type, $items) {
  $counter = 0;
  foreach($items[$icon_type] as $item){
     if($item['target_id'])
     $counter = $counter + 1;
  }
  return $counter;
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function ahd_custom_media_delete(Drupal\Core\Entity\EntityInterface $entity) {
  if (!empty($entity->field_pub_url_doc->value)) {
    $base_url = _get_base_url();
    $file_path = $entity->field_pub_url_doc->value;
    $file_absolute_path =  $_SERVER['DOCUMENT_ROOT'] . strstr($file_path, '/sites/');
    unlink($file_absolute_path);
  }
}

/**
 * Implements hook_editor_js_settings_alter().
 *
 * @see https://www.drupal.org/project/colorbutton/issues/2910028
 */
function ahd_custom_editor_js_settings_alter(array &$settings) {

  $extra_editor_settings = [
    'colorButton_foreStyle' => [
      'element' => 'span',
      'attributes' => ['data-color' => '#(color)']
    ],
    'colorButton_backStyle' => [
      'element' => 'span',
      'attributes' => ['data-background-color' => '#(color)']
    ]
  ];
  if (array_key_exists('rich_text', $settings['editor']['formats'])) {
    $settings['editor']['formats']['rich_text']['editorSettings'] += $extra_editor_settings;
  }

}

function ahd_custom_menu_local_tasks_alter(&$data, $route_name) {
  $current_dest = \Drupal::request()->get('destination');
  if (strpos($route_name, 'entity.media') !== FALSE
  && !empty($current_dest)) {
    if (isset($data['tabs'][0]) && !empty($data['tabs'][0])) {
      foreach ($data['tabs'][0] as &$local_task) {
        $local_task['#link']['url']->setOption('query', ['destination' => $current_dest]);
      }
    }
  }
}

function ahd_custom_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'ahd_custom/ahd.colors';
}

function _get_base_url() {
  $base_url = '';
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    switch ($_ENV['AH_SITE_ENVIRONMENT']) {
      case 'dev':
        $base_url = 'http://ahredesigndev.prod.acquia-sites.com';
        break;
      case 'test':
        $base_url = 'http://ahredesignstg.prod.acquia-sites.com';
        break;
      case 'prod':
        $base_url = 'https://www.athenahealth.com';
        break;
      case 'ra':
        $base_url = 'http://ahredesignstg.prod.acquia-sites.com';
        break;
      }
  }
  else {
     // do something for a non-Acquia-hosted application (like a local dev install).
     $base_url = \Drupal::request()->getSchemeAndHttpHost();
  }

  return $base_url;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * @param $variables
 */
function ahd_custom_preprocess_status_messages(&$variables) {
  $request  = \Drupal::request();
  if(isset($variables['message_list']['status'])){
    $status_messages = $variables['message_list']['status'];
    $dest = '?destination=' . $request->getRequestUri();
    foreach($status_messages as $delta => $message) {
      if (preg_match('/^Document.*has been created\.$/', (string) $message) !== FALSE) {
        $replaced_msg = preg_replace('/(\/media\/[0-9]+)/', '$1' . $dest, (string) $message);
        if ($replaced_msg) {
          $variables['message_list']['status'][$delta] = \Drupal\Core\Render\Markup::create($replaced_msg);
        }
        else {
          unset($variables['message_list']['status'][$delta]);
        }
      }
    }
  }
}

/**
 * Implements hook_simple_sitemap_arbitrary_links_alter().
 */
function ahd_custom_simple_sitemap_arbitrary_links_alter(&$arbitrary_links){
  $custom_non_drupal_links = \Drupal::config('ahd_custom.url_settings')->get('non_drupal_links');
  if(count($arbitrary_links) > 0) {
    $arbitrary_links[] = stringToCustomLinks($custom_non_drupal_links);
  } else {
    $arbitrary_links = stringToCustomLinks($custom_non_drupal_links);
  }

}

/**
 * @param $custom_links_string
 * @return array
 */
function stringToCustomLinks($custom_links_string) {

  // Unify newline characters and explode into array.
  $custom_links_string_lines = explode("\n", str_replace("\r\n", "\n", $custom_links_string));

  // Remove empty values and whitespaces from array.
  $custom_links_string_lines = array_filter(array_map('trim', $custom_links_string_lines));

  $custom_links = [];
  foreach ($custom_links_string_lines as $i => &$line) {
    $link_settings = explode(' ', $line);
    $custom_links[$i]['url'] = $link_settings[0];

    // If two arguments are provided for a link, assume the first to be
    // priority, the second to be changefreq.
    if (!empty($link_settings[1]) && !empty($link_settings[2])) {
      $custom_links[$i]['priority'] = $link_settings[1];
      $custom_links[$i]['changefreq'] = $link_settings[2];
    }
    else {
      // If one argument is provided for a link, guess if it is priority or
      // changefreq.
      if (!empty($link_settings[1])) {
        if (is_numeric($link_settings[1])) {
          $custom_links[$i]['priority'] = $link_settings[1];
        }
        else {
          $custom_links[$i]['changefreq'] = $link_settings[1];
        }
      }
    }
  }
  return $custom_links;
}

/**
 * Modify the list of blocks available through the IPE interface.
 *
 * Filter list of blocks to have only fields of current node bundle.
 *
 * @param array $blocks
 *   The blocks that are currently available.
 * @param $panels_display
 *   The current Panels display.
 */
function ahd_custom_panels_ipe_blocks_alter(array &$blocks, $panels_display) {
  $contexts = $panels_display->getContexts();
  if (isset($contexts['@panelizer.entity_context:entity'])) {
    $context_data = $contexts['@panelizer.entity_context:entity']->getContextData();
    // Get current node bundle type.
    if ($context_data instanceof \Drupal\Core\Entity\Plugin\DataType\EntityAdapter) {
      $entity = $context_data->getValue();
      $bundle = $entity->type;
    }
    // Get list of all fields in an entity bundle.
    if ($bundle instanceof \Drupal\Core\Field\EntityReferenceFieldItemList) {
      $bundle = $bundle->referencedEntities()[0]->get('type');
      $entityManager = \Drupal::service('entity_field.manager');
      $fields = array_keys($entityManager->getFieldDefinitions('node', $bundle));
    }
    // Filter the panelizer field list to have only current bundle fields.
    if (!empty($fields)) {
      $blocks = array_filter($blocks, function ($item) use ($fields) {
        // Apply filter if it is only of entity field.
        if (preg_match('/entity_field:node:/', $item['plugin_id'])) {
          $plugin_id = str_replace('entity_field:node:', '', $item['plugin_id']);
          // Filter by current entity bundle fields and by non empty label.
          if (in_array($plugin_id, $fields) && !empty($item['label'])) {
            return true;
          }
          else {
            return false;
          }
        }
        // If not entity field don't filter.
        else {
          return true;
        }
      });
    }
  }
}